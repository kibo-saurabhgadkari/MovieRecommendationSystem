// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieRecommendation.Infrastructure;

#nullable disable

namespace MovieRecommendation.Infrastructure.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20240312101602_UpdatedEntityRelationship")]
    partial class UpdatedEntityRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DirectorMovie", b =>
                {
                    b.Property<int>("DirectorsDirectorId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesMovieId")
                        .HasColumnType("int");

                    b.HasKey("DirectorsDirectorId", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("DirectorMovie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresGenreId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesMovieId")
                        .HasColumnType("int");

                    b.HasKey("GenresGenreId", "MoviesMovieId");

                    b.HasIndex("MoviesMovieId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorId"), 1L, 1);

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserPreferencesId")
                        .HasColumnType("int");

                    b.HasKey("DirectorId");

                    b.HasIndex("UserPreferencesId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserPreferencesId")
                        .HasColumnType("int");

                    b.HasKey("GenreId");

                    b.HasIndex("UserPreferencesId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.UserPreferences", b =>
                {
                    b.Property<int>("UserPreferencesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPreferencesId"), 1L, 1);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPreferencesId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("RolesRoleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("DirectorMovie", b =>
                {
                    b.HasOne("MovieRecommendation.Infrastructure.Entities.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsDirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieRecommendation.Infrastructure.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("MovieRecommendation.Infrastructure.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresGenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieRecommendation.Infrastructure.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.Director", b =>
                {
                    b.HasOne("MovieRecommendation.Infrastructure.Entities.UserPreferences", null)
                        .WithMany("PreferredDirectors")
                        .HasForeignKey("UserPreferencesId");
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.Genre", b =>
                {
                    b.HasOne("MovieRecommendation.Infrastructure.Entities.UserPreferences", null)
                        .WithMany("PreferredGenres")
                        .HasForeignKey("UserPreferencesId");
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.Movie", b =>
                {
                    b.HasOne("MovieRecommendation.Infrastructure.Entities.User", null)
                        .WithMany("WatchedMovies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.UserPreferences", b =>
                {
                    b.HasOne("MovieRecommendation.Infrastructure.Entities.User", null)
                        .WithOne("Preferences")
                        .HasForeignKey("MovieRecommendation.Infrastructure.Entities.UserPreferences", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("MovieRecommendation.Infrastructure.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieRecommendation.Infrastructure.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("Preferences")
                        .IsRequired();

                    b.Navigation("WatchedMovies");
                });

            modelBuilder.Entity("MovieRecommendation.Infrastructure.Entities.UserPreferences", b =>
                {
                    b.Navigation("PreferredDirectors");

                    b.Navigation("PreferredGenres");
                });
#pragma warning restore 612, 618
        }
    }
}
